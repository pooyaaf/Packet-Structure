#include <iostream>
#include <string>
#include <sstream>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <netdb.h>
#include <sys/uio.h>
#include <sys/time.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <fstream>
#include <vector>

using namespace std;
unsigned int extractCounter(const std::string &data)
{
    // Assuming the data size is fixed as per the given sample
    const int HEADER_SIZE = 4;
    const int COUNTER_START = 4;
    const int COUNTER_SIZE = 4;
    const int FOOTER_SIZE = 4;

    // Check if the data size is correct
    if (data.size() < HEADER_SIZE + COUNTER_SIZE + FOOTER_SIZE)
    {
        std::cerr << "Invalid data size." << std::endl;
        return 0; // Return 0 as counter in case of error
    }

    // Extract the header and footer from the data
    std::string header = data.substr(0, HEADER_SIZE);
    std::string footer = data.substr(data.size() - FOOTER_SIZE, FOOTER_SIZE);
    cout << header << endl;
    // Check if the header and footer values are correct
    if (header != "AFDBAA00" || footer != "FFAADF00")
    {
        std::cerr << "Invalid header or footer." << std::endl;
        return 0; // Return 0 as counter in case of error
    }

    // Extract the counter bytes from the data
    std::string counterBytes = data.substr(COUNTER_START, COUNTER_SIZE);

    // Convert the counter bytes to an unsigned int
    unsigned int counter = 0;
    for (char byte : counterBytes)
    {
        counter = (counter << 8) | static_cast<unsigned char>(byte);
    }

    return counter;
}

int main()
{
    // Sample input as a string
    std::string inputData = "0xAF 0xDB 0xAA 0x00 0x00 0x00 0x00 0x02 0x21 0x1a 0x5c 0x94 0x7f 0xcf 0x0b 0x52 0x54 0x41 0x5d 0x13 0x50 0x58 0x9f 0x08 0x91 0x15 0x3e 0x37 0x65 0xc3 0x7b 0x47 0xf3 0x2b 0x19 0x85 0xf6 0x25 0x13 0xff 0x25 0x59 0x12 0x91 0xb2 0x66 0xec 0x87 0x7d 0x4c 0x61 0x6d 0x69 0x55 0xb1 0xdc 0x4c 0x1c 0x9d 0xe1 0x9f 0x0f 0xa6 0x32 0xca 0x03 0x0f 0x42 0xaa 0x6e 0x1d 0xef 0xfa 0x2e 0x70 0xeb 0x4c 0x4d 0xb4 0x96 0x68 0x66 0xac 0xf4 0xab 0xfe 0xcd 0xfd 0xab 0x15 0x94 0x84 0x9d 0xe8 0x74 0x9f 0xcc 0x17 0x06 0x85 0xce 0x8c 0xce 0x72 0xce 0x71 0x5d 0x40 0x6f 0x9c 0x92 0x74 0x39 0x91 0xf7 0xdb 0x26 0x97 0x08 0xe1 0x4a 0x51 0xc7 0xdb 0xcc 0x0d 0x82 0x93 0x00 0xe3 0x21 0x9c 0x38 0x36 0xc5 0x8d 0x70 0xdb 0x46 0x99 0xbe 0x72 0x9f 0xa6 0x97 0x40 0x70 0x6c 0x41 0x4e 0xcc 0x45 0x00 0x72 0x3e 0x5f 0x7f 0xfd 0xf5 0x67 0xbe 0x0f 0xdc 0xe6 0x8a 0xdb 0xe6 0x91 0x08 0x4b 0x01 0x8e 0x81 0x74 0xdc 0xe9 0x4e 0x51 0x9b 0x43 0x27 0xa0 0xad 0x77 0xdb 0x35 0xc5 0x82 0x4a 0x73 0x92 0xa2 0x42 0x77 0xaf 0x14 0xc9 0x73 0xbb 0x2e 0x17 0xf0 0xf9 0xca 0xa0 0x86 0x45 0x88 0xea 0xe7 0x50 0x64 0x2a 0xa5 0xea 0x58 0xad 0x09 0x09 0xe7 0x0b 0x97 0x09 0x09 0x0e 0xe6 0xb9 0x76 0x60 0x0c 0xc5 0xd4 0xe1 0x83 0x0d 0x98 0x82 0xab 0x33 0x7e 0x9f 0x37 0x95 0x27 0x50 0x34 0xe0 0x17 0x48 0x56 0xae 0x83 0xd4 0x7e 0x3f 0xfe 0xf2 0x6f 0x54 0x1e 0x61 0x06 0x6c 0x76 0xbd 0x67 0xf6 0x66 0xfc 0x76 0x9a 0x24 0x2c 0x54 0x23 0xdb 0xc1 0x88 0xf1 0xfe 0xa9 0x4e 0xdc 0x46 0xec 0xd9 0x49 0x16 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xAA 0xDF 0x00";

    // Convert the input string to bytes
    std::istringstream iss(inputData);
    std::vector<unsigned char> bytes;
    std::string byteString;
    while (iss >> byteString)
    {
        unsigned char byte = static_cast<unsigned char>(std::stoi(byteString, nullptr, 16));
        bytes.push_back(byte);
    }

    // Convert the bytes to a string
    std::string data(reinterpret_cast<char *>(bytes.data()), bytes.size());

    // Extract the counter value
    unsigned int counter = extractCounter(data);

    // Print the counter value
    std::cout << "Counter: " << counter << std::endl;

    return 0;
}